### YamlMime:ManagedReference
items:
- uid: FluentAssertions.Http.HttpResponseMessageAssertions
  commentId: T:FluentAssertions.Http.HttpResponseMessageAssertions
  id: HttpResponseMessageAssertions
  parent: FluentAssertions.Http
  children:
  - FluentAssertions.Http.HttpResponseMessageAssertions.#ctor(System.Net.Http.HttpResponseMessage)
  - FluentAssertions.Http.HttpResponseMessageAssertions.HaveClientErrorStatusCode(System.String,System.Object[])
  - FluentAssertions.Http.HttpResponseMessageAssertions.HaveContent(System.String,System.String,System.Object[])
  - FluentAssertions.Http.HttpResponseMessageAssertions.HaveContent``1(``0,System.Func{EquivalencyAssertionOptions{``0},EquivalencyAssertionOptions{``0}},System.String,System.Object[])
  - FluentAssertions.Http.HttpResponseMessageAssertions.HaveContent``1(``0,System.String,System.Object[])
  - FluentAssertions.Http.HttpResponseMessageAssertions.HaveContentHeader(System.String,System.String,System.Object[])
  - FluentAssertions.Http.HttpResponseMessageAssertions.HaveContentHeaderValue(System.Net.HttpResponseHeader,System.String,System.String,System.Object[])
  - FluentAssertions.Http.HttpResponseMessageAssertions.HaveContentHeaderValue(System.String,System.String,System.String,System.Object[])
  - FluentAssertions.Http.HttpResponseMessageAssertions.HaveContentHeaderValues(System.Net.HttpResponseHeader,System.Collections.Generic.IEnumerable{System.String},System.String,System.Object[])
  - FluentAssertions.Http.HttpResponseMessageAssertions.HaveContentHeaderValues(System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Object[])
  - FluentAssertions.Http.HttpResponseMessageAssertions.HaveContentMatching(System.Linq.Expressions.Expression{System.Func{System.String,System.Boolean}},System.String,System.Object[])
  - FluentAssertions.Http.HttpResponseMessageAssertions.HaveContentMatching``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Object[])
  - FluentAssertions.Http.HttpResponseMessageAssertions.HaveInformationalStatusCode(System.String,System.Object[])
  - FluentAssertions.Http.HttpResponseMessageAssertions.HaveRedirectionStatusCode(System.String,System.Object[])
  - FluentAssertions.Http.HttpResponseMessageAssertions.HaveResponseHeader(System.String,System.String,System.Object[])
  - FluentAssertions.Http.HttpResponseMessageAssertions.HaveResponseHeaderValue(System.Net.HttpResponseHeader,System.String,System.String,System.Object[])
  - FluentAssertions.Http.HttpResponseMessageAssertions.HaveResponseHeaderValue(System.String,System.String,System.String,System.Object[])
  - FluentAssertions.Http.HttpResponseMessageAssertions.HaveResponseHeaderValues(System.Net.HttpResponseHeader,System.Collections.Generic.IEnumerable{System.String},System.String,System.Object[])
  - FluentAssertions.Http.HttpResponseMessageAssertions.HaveResponseHeaderValues(System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Object[])
  - FluentAssertions.Http.HttpResponseMessageAssertions.HaveServerErrorStatusCode(System.String,System.Object[])
  - FluentAssertions.Http.HttpResponseMessageAssertions.HaveStatusCode(System.Net.HttpStatusCode,System.String,System.Object[])
  - FluentAssertions.Http.HttpResponseMessageAssertions.HaveSuccessStatusCode(System.String,System.Object[])
  - FluentAssertions.Http.HttpResponseMessageAssertions.Identifier
  langs:
  - csharp
  - vb
  name: HttpResponseMessageAssertions
  nameWithType: HttpResponseMessageAssertions
  fullName: FluentAssertions.Http.HttpResponseMessageAssertions
  type: Class
  source:
    remote:
      path: FluentAssertions.Http/HttpResponseMessageAssertions.cs
      branch: master
      repo: https://github.com/balanikas/FluentAssertions.Http.git
    id: HttpResponseMessageAssertions
    path: ../FluentAssertions.Http/HttpResponseMessageAssertions.cs
    startLine: 12
  assemblies:
  - FluentAssertions.Http
  namespace: FluentAssertions.Http
  syntax:
    content: 'public class HttpResponseMessageAssertions : ObjectAssertions<HttpResponseMessage, HttpResponseMessageAssertions>'
    content.vb: >-
      Public Class HttpResponseMessageAssertions
          Inherits ObjectAssertions(Of HttpResponseMessage, HttpResponseMessageAssertions)
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: FluentAssertions.Http.HttpResponseMessageAssertions.#ctor(System.Net.Http.HttpResponseMessage)
  commentId: M:FluentAssertions.Http.HttpResponseMessageAssertions.#ctor(System.Net.Http.HttpResponseMessage)
  id: '#ctor(System.Net.Http.HttpResponseMessage)'
  parent: FluentAssertions.Http.HttpResponseMessageAssertions
  langs:
  - csharp
  - vb
  name: HttpResponseMessageAssertions(HttpResponseMessage)
  nameWithType: HttpResponseMessageAssertions.HttpResponseMessageAssertions(HttpResponseMessage)
  fullName: FluentAssertions.Http.HttpResponseMessageAssertions.HttpResponseMessageAssertions(System.Net.Http.HttpResponseMessage)
  type: Constructor
  source:
    remote:
      path: FluentAssertions.Http/HttpResponseMessageAssertions.cs
      branch: master
      repo: https://github.com/balanikas/FluentAssertions.Http.git
    id: .ctor
    path: ../FluentAssertions.Http/HttpResponseMessageAssertions.cs
    startLine: 14
  assemblies:
  - FluentAssertions.Http
  namespace: FluentAssertions.Http
  syntax:
    content: public HttpResponseMessageAssertions(HttpResponseMessage instance)
    parameters:
    - id: instance
      type: System.Net.Http.HttpResponseMessage
    content.vb: Public Sub New(instance As HttpResponseMessage)
  overload: FluentAssertions.Http.HttpResponseMessageAssertions.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: FluentAssertions.Http.HttpResponseMessageAssertions.Identifier
  commentId: P:FluentAssertions.Http.HttpResponseMessageAssertions.Identifier
  id: Identifier
  parent: FluentAssertions.Http.HttpResponseMessageAssertions
  langs:
  - csharp
  - vb
  name: Identifier
  nameWithType: HttpResponseMessageAssertions.Identifier
  fullName: FluentAssertions.Http.HttpResponseMessageAssertions.Identifier
  type: Property
  source:
    remote:
      path: FluentAssertions.Http/HttpResponseMessageAssertions.cs
      branch: master
      repo: https://github.com/balanikas/FluentAssertions.Http.git
    id: Identifier
    path: ../FluentAssertions.Http/HttpResponseMessageAssertions.cs
    startLine: 19
  assemblies:
  - FluentAssertions.Http
  namespace: FluentAssertions.Http
  syntax:
    content: protected override string Identifier { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Protected Overrides ReadOnly Property Identifier As String
  overload: FluentAssertions.Http.HttpResponseMessageAssertions.Identifier*
  modifiers.csharp:
  - protected
  - override
  - get
  modifiers.vb:
  - Protected
  - Overrides
  - ReadOnly
- uid: FluentAssertions.Http.HttpResponseMessageAssertions.HaveStatusCode(System.Net.HttpStatusCode,System.String,System.Object[])
  commentId: M:FluentAssertions.Http.HttpResponseMessageAssertions.HaveStatusCode(System.Net.HttpStatusCode,System.String,System.Object[])
  id: HaveStatusCode(System.Net.HttpStatusCode,System.String,System.Object[])
  parent: FluentAssertions.Http.HttpResponseMessageAssertions
  langs:
  - csharp
  - vb
  name: HaveStatusCode(HttpStatusCode, String, Object[])
  nameWithType: HttpResponseMessageAssertions.HaveStatusCode(HttpStatusCode, String, Object[])
  fullName: FluentAssertions.Http.HttpResponseMessageAssertions.HaveStatusCode(System.Net.HttpStatusCode, System.String, System.Object[])
  type: Method
  source:
    remote:
      path: FluentAssertions.Http/HttpResponseMessageAssertions.cs
      branch: master
      repo: https://github.com/balanikas/FluentAssertions.Http.git
    id: HaveStatusCode
    path: ../FluentAssertions.Http/HttpResponseMessageAssertions.cs
    startLine: 32
  assemblies:
  - FluentAssertions.Http
  namespace: FluentAssertions.Http
  summary: "\nf=&quot;HttpStatusCode&quot;/> is equal to the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">expected</code> value.\n"
  example: []
  syntax:
    content: public AndConstraint<HttpResponseMessageAssertions> HaveStatusCode(HttpStatusCode expected, string because = "", params object[] becauseArgs)
    parameters:
    - id: expected
      type: System.Net.HttpStatusCode
      description: The expected status code <xref href="System.Net.HttpStatusCode" data-throw-if-not-resolved="false"></xref>
    - id: because
      type: System.String
      description: "\nA formatted phrase as is supported by <xref href=\"System.String.Format(System.String%2cSystem.Object%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref> explaining why the assertion\nis needed. If the phrase does not start with the word <em>because</em>, it is prepended automatically.\n"
    - id: becauseArgs
      type: System.Object[]
      description: "\nZero or more objects to format using the placeholders in <code data-dev-comment-type=\"paramref\" class=\"paramref\">because</code>.\n"
    return:
      type: AndConstraint{FluentAssertions.Http.HttpResponseMessageAssertions}
    content.vb: Public Function HaveStatusCode(expected As HttpStatusCode, because As String = "", ParamArray becauseArgs As Object()) As AndConstraint(Of HttpResponseMessageAssertions)
  overload: FluentAssertions.Http.HttpResponseMessageAssertions.HaveStatusCode*
  nameWithType.vb: HttpResponseMessageAssertions.HaveStatusCode(HttpStatusCode, String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FluentAssertions.Http.HttpResponseMessageAssertions.HaveStatusCode(System.Net.HttpStatusCode, System.String, System.Object())
  name.vb: HaveStatusCode(HttpStatusCode, String, Object())
- uid: FluentAssertions.Http.HttpResponseMessageAssertions.HaveInformationalStatusCode(System.String,System.Object[])
  commentId: M:FluentAssertions.Http.HttpResponseMessageAssertions.HaveInformationalStatusCode(System.String,System.Object[])
  id: HaveInformationalStatusCode(System.String,System.Object[])
  parent: FluentAssertions.Http.HttpResponseMessageAssertions
  langs:
  - csharp
  - vb
  name: HaveInformationalStatusCode(String, Object[])
  nameWithType: HttpResponseMessageAssertions.HaveInformationalStatusCode(String, Object[])
  fullName: FluentAssertions.Http.HttpResponseMessageAssertions.HaveInformationalStatusCode(System.String, System.Object[])
  type: Method
  source:
    remote:
      path: FluentAssertions.Http/HttpResponseMessageAssertions.cs
      branch: master
      repo: https://github.com/balanikas/FluentAssertions.Http.git
    id: HaveInformationalStatusCode
    path: ../FluentAssertions.Http/HttpResponseMessageAssertions.cs
    startLine: 62
  assemblies:
  - FluentAssertions.Http
  namespace: FluentAssertions.Http
  summary: "\nAsserts that the <xref href=\"System.Net.HttpStatusCode\" data-throw-if-not-resolved=\"false\"></xref> is informational (1xx).\n"
  example: []
  syntax:
    content: public AndConstraint<HttpResponseMessageAssertions> HaveInformationalStatusCode(string because = "", params object[] becauseArgs)
    parameters:
    - id: because
      type: System.String
      description: "\nA formatted phrase as is supported by <xref href=\"System.String.Format(System.String%2cSystem.Object%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref> explaining why the assertion\nis needed. If the phrase does not start with the word <em>because</em>, it is prepended automatically.\n"
    - id: becauseArgs
      type: System.Object[]
      description: "\nZero or more objects to format using the placeholders in <code data-dev-comment-type=\"paramref\" class=\"paramref\">because</code>.\n"
    return:
      type: AndConstraint{FluentAssertions.Http.HttpResponseMessageAssertions}
    content.vb: Public Function HaveInformationalStatusCode(because As String = "", ParamArray becauseArgs As Object()) As AndConstraint(Of HttpResponseMessageAssertions)
  overload: FluentAssertions.Http.HttpResponseMessageAssertions.HaveInformationalStatusCode*
  nameWithType.vb: HttpResponseMessageAssertions.HaveInformationalStatusCode(String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FluentAssertions.Http.HttpResponseMessageAssertions.HaveInformationalStatusCode(System.String, System.Object())
  name.vb: HaveInformationalStatusCode(String, Object())
- uid: FluentAssertions.Http.HttpResponseMessageAssertions.HaveSuccessStatusCode(System.String,System.Object[])
  commentId: M:FluentAssertions.Http.HttpResponseMessageAssertions.HaveSuccessStatusCode(System.String,System.Object[])
  id: HaveSuccessStatusCode(System.String,System.Object[])
  parent: FluentAssertions.Http.HttpResponseMessageAssertions
  langs:
  - csharp
  - vb
  name: HaveSuccessStatusCode(String, Object[])
  nameWithType: HttpResponseMessageAssertions.HaveSuccessStatusCode(String, Object[])
  fullName: FluentAssertions.Http.HttpResponseMessageAssertions.HaveSuccessStatusCode(System.String, System.Object[])
  type: Method
  source:
    remote:
      path: FluentAssertions.Http/HttpResponseMessageAssertions.cs
      branch: master
      repo: https://github.com/balanikas/FluentAssertions.Http.git
    id: HaveSuccessStatusCode
    path: ../FluentAssertions.Http/HttpResponseMessageAssertions.cs
    startLine: 79
  assemblies:
  - FluentAssertions.Http
  namespace: FluentAssertions.Http
  summary: "\nAsserts that the <xref href=\"System.Net.HttpStatusCode\" data-throw-if-not-resolved=\"false\"></xref> is successful (2xx).\n"
  example: []
  syntax:
    content: public AndConstraint<HttpResponseMessageAssertions> HaveSuccessStatusCode(string because = "", params object[] becauseArgs)
    parameters:
    - id: because
      type: System.String
      description: "\nA formatted phrase as is supported by <xref href=\"System.String.Format(System.String%2cSystem.Object%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref> explaining why the assertion\nis needed. If the phrase does not start with the word <em>because</em>, it is prepended automatically.\n"
    - id: becauseArgs
      type: System.Object[]
      description: "\nZero or more objects to format using the placeholders in <code data-dev-comment-type=\"paramref\" class=\"paramref\">because</code>.\n"
    return:
      type: AndConstraint{FluentAssertions.Http.HttpResponseMessageAssertions}
    content.vb: Public Function HaveSuccessStatusCode(because As String = "", ParamArray becauseArgs As Object()) As AndConstraint(Of HttpResponseMessageAssertions)
  overload: FluentAssertions.Http.HttpResponseMessageAssertions.HaveSuccessStatusCode*
  nameWithType.vb: HttpResponseMessageAssertions.HaveSuccessStatusCode(String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FluentAssertions.Http.HttpResponseMessageAssertions.HaveSuccessStatusCode(System.String, System.Object())
  name.vb: HaveSuccessStatusCode(String, Object())
- uid: FluentAssertions.Http.HttpResponseMessageAssertions.HaveRedirectionStatusCode(System.String,System.Object[])
  commentId: M:FluentAssertions.Http.HttpResponseMessageAssertions.HaveRedirectionStatusCode(System.String,System.Object[])
  id: HaveRedirectionStatusCode(System.String,System.Object[])
  parent: FluentAssertions.Http.HttpResponseMessageAssertions
  langs:
  - csharp
  - vb
  name: HaveRedirectionStatusCode(String, Object[])
  nameWithType: HttpResponseMessageAssertions.HaveRedirectionStatusCode(String, Object[])
  fullName: FluentAssertions.Http.HttpResponseMessageAssertions.HaveRedirectionStatusCode(System.String, System.Object[])
  type: Method
  source:
    remote:
      path: FluentAssertions.Http/HttpResponseMessageAssertions.cs
      branch: master
      repo: https://github.com/balanikas/FluentAssertions.Http.git
    id: HaveRedirectionStatusCode
    path: ../FluentAssertions.Http/HttpResponseMessageAssertions.cs
    startLine: 96
  assemblies:
  - FluentAssertions.Http
  namespace: FluentAssertions.Http
  summary: "\nAsserts that the <xref href=\"System.Net.HttpStatusCode\" data-throw-if-not-resolved=\"false\"></xref> is redirection (3xx).\n"
  example: []
  syntax:
    content: public AndConstraint<HttpResponseMessageAssertions> HaveRedirectionStatusCode(string because = "", params object[] becauseArgs)
    parameters:
    - id: because
      type: System.String
      description: "\nA formatted phrase as is supported by <xref href=\"System.String.Format(System.String%2cSystem.Object%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref> explaining why the assertion\nis needed. If the phrase does not start with the word <em>because</em>, it is prepended automatically.\n"
    - id: becauseArgs
      type: System.Object[]
      description: "\nZero or more objects to format using the placeholders in <code data-dev-comment-type=\"paramref\" class=\"paramref\">because</code>.\n"
    return:
      type: AndConstraint{FluentAssertions.Http.HttpResponseMessageAssertions}
    content.vb: Public Function HaveRedirectionStatusCode(because As String = "", ParamArray becauseArgs As Object()) As AndConstraint(Of HttpResponseMessageAssertions)
  overload: FluentAssertions.Http.HttpResponseMessageAssertions.HaveRedirectionStatusCode*
  nameWithType.vb: HttpResponseMessageAssertions.HaveRedirectionStatusCode(String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FluentAssertions.Http.HttpResponseMessageAssertions.HaveRedirectionStatusCode(System.String, System.Object())
  name.vb: HaveRedirectionStatusCode(String, Object())
- uid: FluentAssertions.Http.HttpResponseMessageAssertions.HaveClientErrorStatusCode(System.String,System.Object[])
  commentId: M:FluentAssertions.Http.HttpResponseMessageAssertions.HaveClientErrorStatusCode(System.String,System.Object[])
  id: HaveClientErrorStatusCode(System.String,System.Object[])
  parent: FluentAssertions.Http.HttpResponseMessageAssertions
  langs:
  - csharp
  - vb
  name: HaveClientErrorStatusCode(String, Object[])
  nameWithType: HttpResponseMessageAssertions.HaveClientErrorStatusCode(String, Object[])
  fullName: FluentAssertions.Http.HttpResponseMessageAssertions.HaveClientErrorStatusCode(System.String, System.Object[])
  type: Method
  source:
    remote:
      path: FluentAssertions.Http/HttpResponseMessageAssertions.cs
      branch: master
      repo: https://github.com/balanikas/FluentAssertions.Http.git
    id: HaveClientErrorStatusCode
    path: ../FluentAssertions.Http/HttpResponseMessageAssertions.cs
    startLine: 113
  assemblies:
  - FluentAssertions.Http
  namespace: FluentAssertions.Http
  summary: "\nAsserts that the <xref href=\"System.Net.HttpStatusCode\" data-throw-if-not-resolved=\"false\"></xref> is client (4xx).\n"
  example: []
  syntax:
    content: public AndConstraint<HttpResponseMessageAssertions> HaveClientErrorStatusCode(string because = "", params object[] becauseArgs)
    parameters:
    - id: because
      type: System.String
      description: "\nA formatted phrase as is supported by <xref href=\"System.String.Format(System.String%2cSystem.Object%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref> explaining why the assertion\nis needed. If the phrase does not start with the word <em>because</em>, it is prepended automatically.\n"
    - id: becauseArgs
      type: System.Object[]
      description: "\nZero or more objects to format using the placeholders in <code data-dev-comment-type=\"paramref\" class=\"paramref\">because</code>.\n"
    return:
      type: AndConstraint{FluentAssertions.Http.HttpResponseMessageAssertions}
    content.vb: Public Function HaveClientErrorStatusCode(because As String = "", ParamArray becauseArgs As Object()) As AndConstraint(Of HttpResponseMessageAssertions)
  overload: FluentAssertions.Http.HttpResponseMessageAssertions.HaveClientErrorStatusCode*
  nameWithType.vb: HttpResponseMessageAssertions.HaveClientErrorStatusCode(String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FluentAssertions.Http.HttpResponseMessageAssertions.HaveClientErrorStatusCode(System.String, System.Object())
  name.vb: HaveClientErrorStatusCode(String, Object())
- uid: FluentAssertions.Http.HttpResponseMessageAssertions.HaveServerErrorStatusCode(System.String,System.Object[])
  commentId: M:FluentAssertions.Http.HttpResponseMessageAssertions.HaveServerErrorStatusCode(System.String,System.Object[])
  id: HaveServerErrorStatusCode(System.String,System.Object[])
  parent: FluentAssertions.Http.HttpResponseMessageAssertions
  langs:
  - csharp
  - vb
  name: HaveServerErrorStatusCode(String, Object[])
  nameWithType: HttpResponseMessageAssertions.HaveServerErrorStatusCode(String, Object[])
  fullName: FluentAssertions.Http.HttpResponseMessageAssertions.HaveServerErrorStatusCode(System.String, System.Object[])
  type: Method
  source:
    remote:
      path: FluentAssertions.Http/HttpResponseMessageAssertions.cs
      branch: master
      repo: https://github.com/balanikas/FluentAssertions.Http.git
    id: HaveServerErrorStatusCode
    path: ../FluentAssertions.Http/HttpResponseMessageAssertions.cs
    startLine: 130
  assemblies:
  - FluentAssertions.Http
  namespace: FluentAssertions.Http
  summary: "\nAsserts that the <xref href=\"System.Net.HttpStatusCode\" data-throw-if-not-resolved=\"false\"></xref> is server error (5xx).\n"
  example: []
  syntax:
    content: public AndConstraint<HttpResponseMessageAssertions> HaveServerErrorStatusCode(string because = "", params object[] becauseArgs)
    parameters:
    - id: because
      type: System.String
      description: "\nA formatted phrase as is supported by <xref href=\"System.String.Format(System.String%2cSystem.Object%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref> explaining why the assertion\nis needed. If the phrase does not start with the word <em>because</em>, it is prepended automatically.\n"
    - id: becauseArgs
      type: System.Object[]
      description: "\nZero or more objects to format using the placeholders in <code data-dev-comment-type=\"paramref\" class=\"paramref\">because</code>.\n"
    return:
      type: AndConstraint{FluentAssertions.Http.HttpResponseMessageAssertions}
    content.vb: Public Function HaveServerErrorStatusCode(because As String = "", ParamArray becauseArgs As Object()) As AndConstraint(Of HttpResponseMessageAssertions)
  overload: FluentAssertions.Http.HttpResponseMessageAssertions.HaveServerErrorStatusCode*
  nameWithType.vb: HttpResponseMessageAssertions.HaveServerErrorStatusCode(String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FluentAssertions.Http.HttpResponseMessageAssertions.HaveServerErrorStatusCode(System.String, System.Object())
  name.vb: HaveServerErrorStatusCode(String, Object())
- uid: FluentAssertions.Http.HttpResponseMessageAssertions.HaveContent(System.String,System.String,System.Object[])
  commentId: M:FluentAssertions.Http.HttpResponseMessageAssertions.HaveContent(System.String,System.String,System.Object[])
  id: HaveContent(System.String,System.String,System.Object[])
  parent: FluentAssertions.Http.HttpResponseMessageAssertions
  langs:
  - csharp
  - vb
  name: HaveContent(String, String, Object[])
  nameWithType: HttpResponseMessageAssertions.HaveContent(String, String, Object[])
  fullName: FluentAssertions.Http.HttpResponseMessageAssertions.HaveContent(System.String, System.String, System.Object[])
  type: Method
  source:
    remote:
      path: FluentAssertions.Http/HttpResponseMessageAssertions.cs
      branch: master
      repo: https://github.com/balanikas/FluentAssertions.Http.git
    id: HaveContent
    path: ../FluentAssertions.Http/HttpResponseMessageAssertions.cs
    startLine: 150
  assemblies:
  - FluentAssertions.Http
  namespace: FluentAssertions.Http
  summary: "\nAsserts that the <xref href=\"System.Net.Http.HttpContent\" data-throw-if-not-resolved=\"false\"></xref> is equal to the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">expected</code> value.\n"
  example: []
  syntax:
    content: public AndConstraint<HttpResponseMessageAssertions> HaveContent(string expected, string because = "", params object[] becauseArgs)
    parameters:
    - id: expected
      type: System.String
      description: The expected content
    - id: because
      type: System.String
      description: "\nA formatted phrase as is supported by <xref href=\"System.String.Format(System.String%2cSystem.Object%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref> explaining why the assertion\nis needed. If the phrase does not start with the word <em>because</em>, it is prepended automatically.\n"
    - id: becauseArgs
      type: System.Object[]
      description: "\nZero or more objects to format using the placeholders in <code data-dev-comment-type=\"paramref\" class=\"paramref\">because</code>.\n"
    return:
      type: AndConstraint{FluentAssertions.Http.HttpResponseMessageAssertions}
    content.vb: Public Function HaveContent(expected As String, because As String = "", ParamArray becauseArgs As Object()) As AndConstraint(Of HttpResponseMessageAssertions)
  overload: FluentAssertions.Http.HttpResponseMessageAssertions.HaveContent*
  nameWithType.vb: HttpResponseMessageAssertions.HaveContent(String, String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FluentAssertions.Http.HttpResponseMessageAssertions.HaveContent(System.String, System.String, System.Object())
  name.vb: HaveContent(String, String, Object())
- uid: FluentAssertions.Http.HttpResponseMessageAssertions.HaveContent``1(``0,System.String,System.Object[])
  commentId: M:FluentAssertions.Http.HttpResponseMessageAssertions.HaveContent``1(``0,System.String,System.Object[])
  id: HaveContent``1(``0,System.String,System.Object[])
  parent: FluentAssertions.Http.HttpResponseMessageAssertions
  langs:
  - csharp
  - vb
  name: HaveContent<T>(T, String, Object[])
  nameWithType: HttpResponseMessageAssertions.HaveContent<T>(T, String, Object[])
  fullName: FluentAssertions.Http.HttpResponseMessageAssertions.HaveContent<T>(T, System.String, System.Object[])
  type: Method
  source:
    remote:
      path: FluentAssertions.Http/HttpResponseMessageAssertions.cs
      branch: master
      repo: https://github.com/balanikas/FluentAssertions.Http.git
    id: HaveContent
    path: ../FluentAssertions.Http/HttpResponseMessageAssertions.cs
    startLine: 180
  assemblies:
  - FluentAssertions.Http
  namespace: FluentAssertions.Http
  summary: "\nAsserts that the <xref href=\"System.Net.Http.HttpContent\" data-throw-if-not-resolved=\"false\"></xref> is equal to the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">expected</code> value.\n"
  example: []
  syntax:
    content: public AndConstraint<HttpResponseMessageAssertions> HaveContent<T>(T expected, string because = "", params object[] becauseArgs)
    parameters:
    - id: expected
      type: '{T}'
      description: The expected content of type <code data-dev-comment-type="paramref" class="paramref">T</code>
    - id: because
      type: System.String
      description: "\nA formatted phrase as is supported by <xref href=\"System.String.Format(System.String%2cSystem.Object%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref> explaining why the assertion\nis needed. If the phrase does not start with the word <em>because</em>, it is prepended automatically.\n"
    - id: becauseArgs
      type: System.Object[]
      description: "\nZero or more objects to format using the placeholders in <code data-dev-comment-type=\"paramref\" class=\"paramref\">because</code>.\n"
    typeParameters:
    - id: T
    return:
      type: AndConstraint{FluentAssertions.Http.HttpResponseMessageAssertions}
    content.vb: Public Function HaveContent(Of T)(expected As T, because As String = "", ParamArray becauseArgs As Object()) As AndConstraint(Of HttpResponseMessageAssertions)
  overload: FluentAssertions.Http.HttpResponseMessageAssertions.HaveContent*
  nameWithType.vb: HttpResponseMessageAssertions.HaveContent(Of T)(T, String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FluentAssertions.Http.HttpResponseMessageAssertions.HaveContent(Of T)(T, System.String, System.Object())
  name.vb: HaveContent(Of T)(T, String, Object())
- uid: FluentAssertions.Http.HttpResponseMessageAssertions.HaveContent``1(``0,System.Func{EquivalencyAssertionOptions{``0},EquivalencyAssertionOptions{``0}},System.String,System.Object[])
  commentId: M:FluentAssertions.Http.HttpResponseMessageAssertions.HaveContent``1(``0,System.Func{EquivalencyAssertionOptions{``0},EquivalencyAssertionOptions{``0}},System.String,System.Object[])
  id: HaveContent``1(``0,System.Func{EquivalencyAssertionOptions{``0},EquivalencyAssertionOptions{``0}},System.String,System.Object[])
  parent: FluentAssertions.Http.HttpResponseMessageAssertions
  langs:
  - csharp
  - vb
  name: HaveContent<T>(T, Func<EquivalencyAssertionOptions<T>, EquivalencyAssertionOptions<T>>, String, Object[])
  nameWithType: HttpResponseMessageAssertions.HaveContent<T>(T, Func<EquivalencyAssertionOptions<T>, EquivalencyAssertionOptions<T>>, String, Object[])
  fullName: FluentAssertions.Http.HttpResponseMessageAssertions.HaveContent<T>(T, System.Func<EquivalencyAssertionOptions<T>, EquivalencyAssertionOptions<T>>, System.String, System.Object[])
  type: Method
  source:
    remote:
      path: FluentAssertions.Http/HttpResponseMessageAssertions.cs
      branch: master
      repo: https://github.com/balanikas/FluentAssertions.Http.git
    id: HaveContent
    path: ../FluentAssertions.Http/HttpResponseMessageAssertions.cs
    startLine: 211
  assemblies:
  - FluentAssertions.Http
  namespace: FluentAssertions.Http
  summary: "\nAsserts that the <xref href=\"System.Net.Http.HttpContent\" data-throw-if-not-resolved=\"false\"></xref> is equal to the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">expected</code> value.\n"
  example: []
  syntax:
    content: public AndConstraint<HttpResponseMessageAssertions> HaveContent<T>(T expected, Func<EquivalencyAssertionOptions<T>, EquivalencyAssertionOptions<T>> options, string because = "", params object[] becauseArgs)
    parameters:
    - id: expected
      type: '{T}'
      description: The expected content of type <sparamref name="T"></sparamref>.
    - id: options
      type: System.Func{EquivalencyAssertionOptions{{T}},EquivalencyAssertionOptions{{T}}}
      description: The equivalency options.
    - id: because
      type: System.String
      description: "\nA formatted phrase as is supported by <xref href=\"System.String.Format(System.String%2cSystem.Object%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref> explaining why the assertion\nis needed. If the phrase does not start with the word <em>because</em>, it is prepended automatically.\n"
    - id: becauseArgs
      type: System.Object[]
      description: "\nZero or more objects to format using the placeholders in <code data-dev-comment-type=\"paramref\" class=\"paramref\">because</code>.\n"
    typeParameters:
    - id: T
    return:
      type: AndConstraint{FluentAssertions.Http.HttpResponseMessageAssertions}
    content.vb: Public Function HaveContent(Of T)(expected As T, options As Func(Of EquivalencyAssertionOptions(Of T), EquivalencyAssertionOptions(Of T)), because As String = "", ParamArray becauseArgs As Object()) As AndConstraint(Of HttpResponseMessageAssertions)
  overload: FluentAssertions.Http.HttpResponseMessageAssertions.HaveContent*
  nameWithType.vb: HttpResponseMessageAssertions.HaveContent(Of T)(T, Func(Of EquivalencyAssertionOptions(Of T), EquivalencyAssertionOptions(Of T)), String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FluentAssertions.Http.HttpResponseMessageAssertions.HaveContent(Of T)(T, System.Func(Of EquivalencyAssertionOptions(Of T), EquivalencyAssertionOptions(Of T)), System.String, System.Object())
  name.vb: HaveContent(Of T)(T, Func(Of EquivalencyAssertionOptions(Of T), EquivalencyAssertionOptions(Of T)), String, Object())
- uid: FluentAssertions.Http.HttpResponseMessageAssertions.HaveContentMatching``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Object[])
  commentId: M:FluentAssertions.Http.HttpResponseMessageAssertions.HaveContentMatching``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Object[])
  id: HaveContentMatching``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Object[])
  parent: FluentAssertions.Http.HttpResponseMessageAssertions
  langs:
  - csharp
  - vb
  name: HaveContentMatching<T>(Expression<Func<T, Boolean>>, String, Object[])
  nameWithType: HttpResponseMessageAssertions.HaveContentMatching<T>(Expression<Func<T, Boolean>>, String, Object[])
  fullName: FluentAssertions.Http.HttpResponseMessageAssertions.HaveContentMatching<T>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.String, System.Object[])
  type: Method
  source:
    remote:
      path: FluentAssertions.Http/HttpResponseMessageAssertions.cs
      branch: master
      repo: https://github.com/balanikas/FluentAssertions.Http.git
    id: HaveContentMatching
    path: ../FluentAssertions.Http/HttpResponseMessageAssertions.cs
    startLine: 242
  assemblies:
  - FluentAssertions.Http
  namespace: FluentAssertions.Http
  summary: "\nAsserts that the <xref href=\"System.Net.Http.HttpContent\" data-throw-if-not-resolved=\"false\"></xref> is equal to the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">predicate</code>.\n"
  example: []
  syntax:
    content: public AndConstraint<HttpResponseMessageAssertions> HaveContentMatching<T>(Expression<Func<T, bool>> predicate, string because = "", params object[] becauseArgs)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
      description: The expression.
    - id: because
      type: System.String
      description: "\nA formatted phrase as is supported by <xref href=\"System.String.Format(System.String%2cSystem.Object%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref> explaining why the assertion\nis needed. If the phrase does not start with the word <em>because</em>, it is prepended automatically.\n"
    - id: becauseArgs
      type: System.Object[]
      description: "\nZero or more objects to format using the placeholders in <code data-dev-comment-type=\"paramref\" class=\"paramref\">because</code>.\n"
    typeParameters:
    - id: T
    return:
      type: AndConstraint{FluentAssertions.Http.HttpResponseMessageAssertions}
    content.vb: Public Function HaveContentMatching(Of T)(predicate As Expression(Of Func(Of T, Boolean)), because As String = "", ParamArray becauseArgs As Object()) As AndConstraint(Of HttpResponseMessageAssertions)
  overload: FluentAssertions.Http.HttpResponseMessageAssertions.HaveContentMatching*
  nameWithType.vb: HttpResponseMessageAssertions.HaveContentMatching(Of T)(Expression(Of Func(Of T, Boolean)), String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FluentAssertions.Http.HttpResponseMessageAssertions.HaveContentMatching(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.String, System.Object())
  name.vb: HaveContentMatching(Of T)(Expression(Of Func(Of T, Boolean)), String, Object())
- uid: FluentAssertions.Http.HttpResponseMessageAssertions.HaveContentMatching(System.Linq.Expressions.Expression{System.Func{System.String,System.Boolean}},System.String,System.Object[])
  commentId: M:FluentAssertions.Http.HttpResponseMessageAssertions.HaveContentMatching(System.Linq.Expressions.Expression{System.Func{System.String,System.Boolean}},System.String,System.Object[])
  id: HaveContentMatching(System.Linq.Expressions.Expression{System.Func{System.String,System.Boolean}},System.String,System.Object[])
  parent: FluentAssertions.Http.HttpResponseMessageAssertions
  langs:
  - csharp
  - vb
  name: HaveContentMatching(Expression<Func<String, Boolean>>, String, Object[])
  nameWithType: HttpResponseMessageAssertions.HaveContentMatching(Expression<Func<String, Boolean>>, String, Object[])
  fullName: FluentAssertions.Http.HttpResponseMessageAssertions.HaveContentMatching(System.Linq.Expressions.Expression<System.Func<System.String, System.Boolean>>, System.String, System.Object[])
  type: Method
  source:
    remote:
      path: FluentAssertions.Http/HttpResponseMessageAssertions.cs
      branch: master
      repo: https://github.com/balanikas/FluentAssertions.Http.git
    id: HaveContentMatching
    path: ../FluentAssertions.Http/HttpResponseMessageAssertions.cs
    startLine: 272
  assemblies:
  - FluentAssertions.Http
  namespace: FluentAssertions.Http
  summary: "\nAsserts that the <xref href=\"System.Net.Http.HttpContent\" data-throw-if-not-resolved=\"false\"></xref> is equal to the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">predicate</code>.\n"
  example: []
  syntax:
    content: public AndConstraint<HttpResponseMessageAssertions> HaveContentMatching(Expression<Func<string, bool>> predicate, string because = "", params object[] becauseArgs)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{System.String,System.Boolean}}
      description: The expression.
    - id: because
      type: System.String
      description: "\nA formatted phrase as is supported by <xref href=\"System.String.Format(System.String%2cSystem.Object%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref> explaining why the assertion\nis needed. If the phrase does not start with the word <em>because</em>, it is prepended automatically.\n"
    - id: becauseArgs
      type: System.Object[]
      description: "\nZero or more objects to format using the placeholders in <code data-dev-comment-type=\"paramref\" class=\"paramref\">because</code>.\n"
    return:
      type: AndConstraint{FluentAssertions.Http.HttpResponseMessageAssertions}
    content.vb: Public Function HaveContentMatching(predicate As Expression(Of Func(Of String, Boolean)), because As String = "", ParamArray becauseArgs As Object()) As AndConstraint(Of HttpResponseMessageAssertions)
  overload: FluentAssertions.Http.HttpResponseMessageAssertions.HaveContentMatching*
  nameWithType.vb: HttpResponseMessageAssertions.HaveContentMatching(Expression(Of Func(Of String, Boolean)), String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FluentAssertions.Http.HttpResponseMessageAssertions.HaveContentMatching(System.Linq.Expressions.Expression(Of System.Func(Of System.String, System.Boolean)), System.String, System.Object())
  name.vb: HaveContentMatching(Expression(Of Func(Of String, Boolean)), String, Object())
- uid: FluentAssertions.Http.HttpResponseMessageAssertions.HaveResponseHeader(System.String,System.String,System.Object[])
  commentId: M:FluentAssertions.Http.HttpResponseMessageAssertions.HaveResponseHeader(System.String,System.String,System.Object[])
  id: HaveResponseHeader(System.String,System.String,System.Object[])
  parent: FluentAssertions.Http.HttpResponseMessageAssertions
  langs:
  - csharp
  - vb
  name: HaveResponseHeader(String, String, Object[])
  nameWithType: HttpResponseMessageAssertions.HaveResponseHeader(String, String, Object[])
  fullName: FluentAssertions.Http.HttpResponseMessageAssertions.HaveResponseHeader(System.String, System.String, System.Object[])
  type: Method
  source:
    remote:
      path: FluentAssertions.Http/HttpResponseMessageAssertions.cs
      branch: master
      repo: https://github.com/balanikas/FluentAssertions.Http.git
    id: HaveResponseHeader
    path: ../FluentAssertions.Http/HttpResponseMessageAssertions.cs
    startLine: 302
  assemblies:
  - FluentAssertions.Http
  namespace: FluentAssertions.Http
  summary: "\nAsserts that the <xref href=\"System.Net.Http.HttpResponseMessage\" data-throw-if-not-resolved=\"false\"></xref> response headers contain a <code data-dev-comment-type=\"paramref\" class=\"paramref\">headerName</code> header.\n"
  example: []
  syntax:
    content: public AndConstraint<HttpResponseMessageAssertions> HaveResponseHeader(string headerName, string because = "", params object[] becauseArgs)
    parameters:
    - id: headerName
      type: System.String
      description: The name of the header to find.
    - id: because
      type: System.String
      description: "\nA formatted phrase as is supported by <xref href=\"System.String.Format(System.String%2cSystem.Object%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref> explaining why the assertion\nis needed. If the phrase does not start with the word <em>because</em>, it is prepended automatically.\n"
    - id: becauseArgs
      type: System.Object[]
      description: "\nZero or more objects to format using the placeholders in <code data-dev-comment-type=\"paramref\" class=\"paramref\">because</code>.\n"
    return:
      type: AndConstraint{FluentAssertions.Http.HttpResponseMessageAssertions}
    content.vb: Public Function HaveResponseHeader(headerName As String, because As String = "", ParamArray becauseArgs As Object()) As AndConstraint(Of HttpResponseMessageAssertions)
  overload: FluentAssertions.Http.HttpResponseMessageAssertions.HaveResponseHeader*
  nameWithType.vb: HttpResponseMessageAssertions.HaveResponseHeader(String, String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FluentAssertions.Http.HttpResponseMessageAssertions.HaveResponseHeader(System.String, System.String, System.Object())
  name.vb: HaveResponseHeader(String, String, Object())
- uid: FluentAssertions.Http.HttpResponseMessageAssertions.HaveResponseHeaderValue(System.String,System.String,System.String,System.Object[])
  commentId: M:FluentAssertions.Http.HttpResponseMessageAssertions.HaveResponseHeaderValue(System.String,System.String,System.String,System.Object[])
  id: HaveResponseHeaderValue(System.String,System.String,System.String,System.Object[])
  parent: FluentAssertions.Http.HttpResponseMessageAssertions
  langs:
  - csharp
  - vb
  name: HaveResponseHeaderValue(String, String, String, Object[])
  nameWithType: HttpResponseMessageAssertions.HaveResponseHeaderValue(String, String, String, Object[])
  fullName: FluentAssertions.Http.HttpResponseMessageAssertions.HaveResponseHeaderValue(System.String, System.String, System.String, System.Object[])
  type: Method
  source:
    remote:
      path: FluentAssertions.Http/HttpResponseMessageAssertions.cs
      branch: master
      repo: https://github.com/balanikas/FluentAssertions.Http.git
    id: HaveResponseHeaderValue
    path: ../FluentAssertions.Http/HttpResponseMessageAssertions.cs
    startLine: 333
  assemblies:
  - FluentAssertions.Http
  namespace: FluentAssertions.Http
  summary: "\nAsserts that the <xref href=\"System.Net.Http.HttpResponseMessage\" data-throw-if-not-resolved=\"false\"></xref> response headers contain <code data-dev-comment-type=\"paramref\" class=\"paramref\">expected</code> in <code data-dev-comment-type=\"paramref\" class=\"paramref\">headerName</code> header.\n"
  example: []
  syntax:
    content: public AndConstraint<HttpResponseMessageAssertions> HaveResponseHeaderValue(string headerName, string expected, string because = "", params object[] becauseArgs)
    parameters:
    - id: headerName
      type: System.String
      description: The name of the header to find.
    - id: expected
      type: System.String
      description: The expected header value in <code data-dev-comment-type="paramref" class="paramref">headerName</code>.
    - id: because
      type: System.String
      description: "\nA formatted phrase as is supported by <xref href=\"System.String.Format(System.String%2cSystem.Object%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref> explaining why the assertion\nis needed. If the phrase does not start with the word <em>because</em>, it is prepended automatically.\n"
    - id: becauseArgs
      type: System.Object[]
      description: "\nZero or more objects to format using the placeholders in <code data-dev-comment-type=\"paramref\" class=\"paramref\">because</code>.\n"
    return:
      type: AndConstraint{FluentAssertions.Http.HttpResponseMessageAssertions}
    content.vb: Public Function HaveResponseHeaderValue(headerName As String, expected As String, because As String = "", ParamArray becauseArgs As Object()) As AndConstraint(Of HttpResponseMessageAssertions)
  overload: FluentAssertions.Http.HttpResponseMessageAssertions.HaveResponseHeaderValue*
  nameWithType.vb: HttpResponseMessageAssertions.HaveResponseHeaderValue(String, String, String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FluentAssertions.Http.HttpResponseMessageAssertions.HaveResponseHeaderValue(System.String, System.String, System.String, System.Object())
  name.vb: HaveResponseHeaderValue(String, String, String, Object())
- uid: FluentAssertions.Http.HttpResponseMessageAssertions.HaveResponseHeaderValue(System.Net.HttpResponseHeader,System.String,System.String,System.Object[])
  commentId: M:FluentAssertions.Http.HttpResponseMessageAssertions.HaveResponseHeaderValue(System.Net.HttpResponseHeader,System.String,System.String,System.Object[])
  id: HaveResponseHeaderValue(System.Net.HttpResponseHeader,System.String,System.String,System.Object[])
  parent: FluentAssertions.Http.HttpResponseMessageAssertions
  langs:
  - csharp
  - vb
  name: HaveResponseHeaderValue(HttpResponseHeader, String, String, Object[])
  nameWithType: HttpResponseMessageAssertions.HaveResponseHeaderValue(HttpResponseHeader, String, String, Object[])
  fullName: FluentAssertions.Http.HttpResponseMessageAssertions.HaveResponseHeaderValue(System.Net.HttpResponseHeader, System.String, System.String, System.Object[])
  type: Method
  source:
    remote:
      path: FluentAssertions.Http/HttpResponseMessageAssertions.cs
      branch: master
      repo: https://github.com/balanikas/FluentAssertions.Http.git
    id: HaveResponseHeaderValue
    path: ../FluentAssertions.Http/HttpResponseMessageAssertions.cs
    startLine: 354
  assemblies:
  - FluentAssertions.Http
  namespace: FluentAssertions.Http
  summary: "\nAsserts that the <xref href=\"System.Net.Http.HttpResponseMessage\" data-throw-if-not-resolved=\"false\"></xref> response headers contain <code data-dev-comment-type=\"paramref\" class=\"paramref\">expected</code> in <code data-dev-comment-type=\"paramref\" class=\"paramref\">header</code> header.\n"
  example: []
  syntax:
    content: public AndConstraint<HttpResponseMessageAssertions> HaveResponseHeaderValue(HttpResponseHeader header, string expected, string because = "", params object[] becauseArgs)
    parameters:
    - id: header
      type: System.Net.HttpResponseHeader
      description: The header to find.
    - id: expected
      type: System.String
      description: The expected header value in the <code data-dev-comment-type="paramref" class="paramref">header</code>.
    - id: because
      type: System.String
      description: "\nA formatted phrase as is supported by <xref href=\"System.String.Format(System.String%2cSystem.Object%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref> explaining why the assertion\nis needed. If the phrase does not start with the word <em>because</em>, it is prepended automatically.\n"
    - id: becauseArgs
      type: System.Object[]
      description: "\nZero or more objects to format using the placeholders in <code data-dev-comment-type=\"paramref\" class=\"paramref\">because</code>.\n"
    return:
      type: AndConstraint{FluentAssertions.Http.HttpResponseMessageAssertions}
    content.vb: Public Function HaveResponseHeaderValue(header As HttpResponseHeader, expected As String, because As String = "", ParamArray becauseArgs As Object()) As AndConstraint(Of HttpResponseMessageAssertions)
  overload: FluentAssertions.Http.HttpResponseMessageAssertions.HaveResponseHeaderValue*
  nameWithType.vb: HttpResponseMessageAssertions.HaveResponseHeaderValue(HttpResponseHeader, String, String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FluentAssertions.Http.HttpResponseMessageAssertions.HaveResponseHeaderValue(System.Net.HttpResponseHeader, System.String, System.String, System.Object())
  name.vb: HaveResponseHeaderValue(HttpResponseHeader, String, String, Object())
- uid: FluentAssertions.Http.HttpResponseMessageAssertions.HaveResponseHeaderValues(System.Net.HttpResponseHeader,System.Collections.Generic.IEnumerable{System.String},System.String,System.Object[])
  commentId: M:FluentAssertions.Http.HttpResponseMessageAssertions.HaveResponseHeaderValues(System.Net.HttpResponseHeader,System.Collections.Generic.IEnumerable{System.String},System.String,System.Object[])
  id: HaveResponseHeaderValues(System.Net.HttpResponseHeader,System.Collections.Generic.IEnumerable{System.String},System.String,System.Object[])
  parent: FluentAssertions.Http.HttpResponseMessageAssertions
  langs:
  - csharp
  - vb
  name: HaveResponseHeaderValues(HttpResponseHeader, IEnumerable<String>, String, Object[])
  nameWithType: HttpResponseMessageAssertions.HaveResponseHeaderValues(HttpResponseHeader, IEnumerable<String>, String, Object[])
  fullName: FluentAssertions.Http.HttpResponseMessageAssertions.HaveResponseHeaderValues(System.Net.HttpResponseHeader, System.Collections.Generic.IEnumerable<System.String>, System.String, System.Object[])
  type: Method
  source:
    remote:
      path: FluentAssertions.Http/HttpResponseMessageAssertions.cs
      branch: master
      repo: https://github.com/balanikas/FluentAssertions.Http.git
    id: HaveResponseHeaderValues
    path: ../FluentAssertions.Http/HttpResponseMessageAssertions.cs
    startLine: 375
  assemblies:
  - FluentAssertions.Http
  namespace: FluentAssertions.Http
  summary: "\nAsserts that the <xref href=\"System.Net.Http.HttpResponseMessage\" data-throw-if-not-resolved=\"false\"></xref> response headers contain <code data-dev-comment-type=\"paramref\" class=\"paramref\">expected</code> in <code data-dev-comment-type=\"paramref\" class=\"paramref\">header</code> header.\n"
  example: []
  syntax:
    content: public AndConstraint<HttpResponseMessageAssertions> HaveResponseHeaderValues(HttpResponseHeader header, IEnumerable<string> expected, string because = "", params object[] becauseArgs)
    parameters:
    - id: header
      type: System.Net.HttpResponseHeader
      description: The header to find.
    - id: expected
      type: System.Collections.Generic.IEnumerable{System.String}
      description: The expected header values in the <code data-dev-comment-type="paramref" class="paramref">header</code>.
    - id: because
      type: System.String
      description: "\nA formatted phrase as is supported by <xref href=\"System.String.Format(System.String%2cSystem.Object%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref> explaining why the assertion\nis needed. If the phrase does not start with the word <em>because</em>, it is prepended automatically.\n"
    - id: becauseArgs
      type: System.Object[]
      description: "\nZero or more objects to format using the placeholders in <code data-dev-comment-type=\"paramref\" class=\"paramref\">because</code>.\n"
    return:
      type: AndConstraint{FluentAssertions.Http.HttpResponseMessageAssertions}
    content.vb: Public Function HaveResponseHeaderValues(header As HttpResponseHeader, expected As IEnumerable(Of String), because As String = "", ParamArray becauseArgs As Object()) As AndConstraint(Of HttpResponseMessageAssertions)
  overload: FluentAssertions.Http.HttpResponseMessageAssertions.HaveResponseHeaderValues*
  nameWithType.vb: HttpResponseMessageAssertions.HaveResponseHeaderValues(HttpResponseHeader, IEnumerable(Of String), String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FluentAssertions.Http.HttpResponseMessageAssertions.HaveResponseHeaderValues(System.Net.HttpResponseHeader, System.Collections.Generic.IEnumerable(Of System.String), System.String, System.Object())
  name.vb: HaveResponseHeaderValues(HttpResponseHeader, IEnumerable(Of String), String, Object())
- uid: FluentAssertions.Http.HttpResponseMessageAssertions.HaveResponseHeaderValues(System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Object[])
  commentId: M:FluentAssertions.Http.HttpResponseMessageAssertions.HaveResponseHeaderValues(System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Object[])
  id: HaveResponseHeaderValues(System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Object[])
  parent: FluentAssertions.Http.HttpResponseMessageAssertions
  langs:
  - csharp
  - vb
  name: HaveResponseHeaderValues(String, IEnumerable<String>, String, Object[])
  nameWithType: HttpResponseMessageAssertions.HaveResponseHeaderValues(String, IEnumerable<String>, String, Object[])
  fullName: FluentAssertions.Http.HttpResponseMessageAssertions.HaveResponseHeaderValues(System.String, System.Collections.Generic.IEnumerable<System.String>, System.String, System.Object[])
  type: Method
  source:
    remote:
      path: FluentAssertions.Http/HttpResponseMessageAssertions.cs
      branch: master
      repo: https://github.com/balanikas/FluentAssertions.Http.git
    id: HaveResponseHeaderValues
    path: ../FluentAssertions.Http/HttpResponseMessageAssertions.cs
    startLine: 396
  assemblies:
  - FluentAssertions.Http
  namespace: FluentAssertions.Http
  summary: "\nAsserts that the <xref href=\"System.Net.Http.HttpResponseMessage\" data-throw-if-not-resolved=\"false\"></xref> response headers contain <code data-dev-comment-type=\"paramref\" class=\"paramref\">expected</code> in <code data-dev-comment-type=\"paramref\" class=\"paramref\">headerName</code> header.\n"
  example: []
  syntax:
    content: public AndConstraint<HttpResponseMessageAssertions> HaveResponseHeaderValues(string headerName, IEnumerable<string> expected, string because = "", params object[] becauseArgs)
    parameters:
    - id: headerName
      type: System.String
      description: The name of the header to find.
    - id: expected
      type: System.Collections.Generic.IEnumerable{System.String}
      description: The expected header values to find in <code data-dev-comment-type="paramref" class="paramref">headerName</code>.
    - id: because
      type: System.String
      description: "\nA formatted phrase as is supported by <xref href=\"System.String.Format(System.String%2cSystem.Object%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref> explaining why the assertion\nis needed. If the phrase does not start with the word <em>because</em>, it is prepended automatically.\n"
    - id: becauseArgs
      type: System.Object[]
      description: "\nZero or more objects to format using the placeholders in <code data-dev-comment-type=\"paramref\" class=\"paramref\">because</code>.\n"
    return:
      type: AndConstraint{FluentAssertions.Http.HttpResponseMessageAssertions}
    content.vb: Public Function HaveResponseHeaderValues(headerName As String, expected As IEnumerable(Of String), because As String = "", ParamArray becauseArgs As Object()) As AndConstraint(Of HttpResponseMessageAssertions)
  overload: FluentAssertions.Http.HttpResponseMessageAssertions.HaveResponseHeaderValues*
  nameWithType.vb: HttpResponseMessageAssertions.HaveResponseHeaderValues(String, IEnumerable(Of String), String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FluentAssertions.Http.HttpResponseMessageAssertions.HaveResponseHeaderValues(System.String, System.Collections.Generic.IEnumerable(Of System.String), System.String, System.Object())
  name.vb: HaveResponseHeaderValues(String, IEnumerable(Of String), String, Object())
- uid: FluentAssertions.Http.HttpResponseMessageAssertions.HaveContentHeader(System.String,System.String,System.Object[])
  commentId: M:FluentAssertions.Http.HttpResponseMessageAssertions.HaveContentHeader(System.String,System.String,System.Object[])
  id: HaveContentHeader(System.String,System.String,System.Object[])
  parent: FluentAssertions.Http.HttpResponseMessageAssertions
  langs:
  - csharp
  - vb
  name: HaveContentHeader(String, String, Object[])
  nameWithType: HttpResponseMessageAssertions.HaveContentHeader(String, String, Object[])
  fullName: FluentAssertions.Http.HttpResponseMessageAssertions.HaveContentHeader(System.String, System.String, System.Object[])
  type: Method
  source:
    remote:
      path: FluentAssertions.Http/HttpResponseMessageAssertions.cs
      branch: master
      repo: https://github.com/balanikas/FluentAssertions.Http.git
    id: HaveContentHeader
    path: ../FluentAssertions.Http/HttpResponseMessageAssertions.cs
    startLine: 429
  assemblies:
  - FluentAssertions.Http
  namespace: FluentAssertions.Http
  summary: "\nAsserts that the <xref href=\"System.Net.Http.HttpResponseMessage\" data-throw-if-not-resolved=\"false\"></xref> content headers i contain a <code data-dev-comment-type=\"paramref\" class=\"paramref\">headerName</code> header.\n"
  example: []
  syntax:
    content: public AndConstraint<HttpResponseMessageAssertions> HaveContentHeader(string headerName, string because = "", params object[] becauseArgs)
    parameters:
    - id: headerName
      type: System.String
      description: The name of the header to find.
    - id: because
      type: System.String
      description: "\nA formatted phrase as is supported by <xref href=\"System.String.Format(System.String%2cSystem.Object%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref> explaining why the assertion\nis needed. If the phrase does not start with the word <em>because</em>, it is prepended automatically.\n"
    - id: becauseArgs
      type: System.Object[]
      description: "\nZero or more objects to format using the placeholders in <code data-dev-comment-type=\"paramref\" class=\"paramref\">because</code>.\n"
    return:
      type: AndConstraint{FluentAssertions.Http.HttpResponseMessageAssertions}
    content.vb: Public Function HaveContentHeader(headerName As String, because As String = "", ParamArray becauseArgs As Object()) As AndConstraint(Of HttpResponseMessageAssertions)
  overload: FluentAssertions.Http.HttpResponseMessageAssertions.HaveContentHeader*
  nameWithType.vb: HttpResponseMessageAssertions.HaveContentHeader(String, String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FluentAssertions.Http.HttpResponseMessageAssertions.HaveContentHeader(System.String, System.String, System.Object())
  name.vb: HaveContentHeader(String, String, Object())
- uid: FluentAssertions.Http.HttpResponseMessageAssertions.HaveContentHeaderValue(System.String,System.String,System.String,System.Object[])
  commentId: M:FluentAssertions.Http.HttpResponseMessageAssertions.HaveContentHeaderValue(System.String,System.String,System.String,System.Object[])
  id: HaveContentHeaderValue(System.String,System.String,System.String,System.Object[])
  parent: FluentAssertions.Http.HttpResponseMessageAssertions
  langs:
  - csharp
  - vb
  name: HaveContentHeaderValue(String, String, String, Object[])
  nameWithType: HttpResponseMessageAssertions.HaveContentHeaderValue(String, String, String, Object[])
  fullName: FluentAssertions.Http.HttpResponseMessageAssertions.HaveContentHeaderValue(System.String, System.String, System.String, System.Object[])
  type: Method
  source:
    remote:
      path: FluentAssertions.Http/HttpResponseMessageAssertions.cs
      branch: master
      repo: https://github.com/balanikas/FluentAssertions.Http.git
    id: HaveContentHeaderValue
    path: ../FluentAssertions.Http/HttpResponseMessageAssertions.cs
    startLine: 460
  assemblies:
  - FluentAssertions.Http
  namespace: FluentAssertions.Http
  summary: "\nAsserts that the <xref href=\"System.Net.Http.HttpResponseMessage\" data-throw-if-not-resolved=\"false\"></xref> response headers contain <code data-dev-comment-type=\"paramref\" class=\"paramref\">expected</code> in <code data-dev-comment-type=\"paramref\" class=\"paramref\">headerName</code> header.\n"
  example: []
  syntax:
    content: public AndConstraint<HttpResponseMessageAssertions> HaveContentHeaderValue(string headerName, string expected, string because = "", params object[] becauseArgs)
    parameters:
    - id: headerName
      type: System.String
      description: The name of the header to find.
    - id: expected
      type: System.String
      description: The header value to find in <code data-dev-comment-type="paramref" class="paramref">headerName</code>.
    - id: because
      type: System.String
      description: "\nA formatted phrase as is supported by <xref href=\"System.String.Format(System.String%2cSystem.Object%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref> explaining why the assertion\nis needed. If the phrase does not start with the word <em>because</em>, it is prepended automatically.\n"
    - id: becauseArgs
      type: System.Object[]
      description: "\nZero or more objects to format using the placeholders in <code data-dev-comment-type=\"paramref\" class=\"paramref\">because</code>.\n"
    return:
      type: AndConstraint{FluentAssertions.Http.HttpResponseMessageAssertions}
    content.vb: Public Function HaveContentHeaderValue(headerName As String, expected As String, because As String = "", ParamArray becauseArgs As Object()) As AndConstraint(Of HttpResponseMessageAssertions)
  overload: FluentAssertions.Http.HttpResponseMessageAssertions.HaveContentHeaderValue*
  nameWithType.vb: HttpResponseMessageAssertions.HaveContentHeaderValue(String, String, String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FluentAssertions.Http.HttpResponseMessageAssertions.HaveContentHeaderValue(System.String, System.String, System.String, System.Object())
  name.vb: HaveContentHeaderValue(String, String, String, Object())
- uid: FluentAssertions.Http.HttpResponseMessageAssertions.HaveContentHeaderValue(System.Net.HttpResponseHeader,System.String,System.String,System.Object[])
  commentId: M:FluentAssertions.Http.HttpResponseMessageAssertions.HaveContentHeaderValue(System.Net.HttpResponseHeader,System.String,System.String,System.Object[])
  id: HaveContentHeaderValue(System.Net.HttpResponseHeader,System.String,System.String,System.Object[])
  parent: FluentAssertions.Http.HttpResponseMessageAssertions
  langs:
  - csharp
  - vb
  name: HaveContentHeaderValue(HttpResponseHeader, String, String, Object[])
  nameWithType: HttpResponseMessageAssertions.HaveContentHeaderValue(HttpResponseHeader, String, String, Object[])
  fullName: FluentAssertions.Http.HttpResponseMessageAssertions.HaveContentHeaderValue(System.Net.HttpResponseHeader, System.String, System.String, System.Object[])
  type: Method
  source:
    remote:
      path: FluentAssertions.Http/HttpResponseMessageAssertions.cs
      branch: master
      repo: https://github.com/balanikas/FluentAssertions.Http.git
    id: HaveContentHeaderValue
    path: ../FluentAssertions.Http/HttpResponseMessageAssertions.cs
    startLine: 481
  assemblies:
  - FluentAssertions.Http
  namespace: FluentAssertions.Http
  summary: "\nAsserts that the <xref href=\"System.Net.Http.HttpResponseMessage\" data-throw-if-not-resolved=\"false\"></xref> response headers contain <code data-dev-comment-type=\"paramref\" class=\"paramref\">expected</code> in <code data-dev-comment-type=\"paramref\" class=\"paramref\">header</code> header.\n"
  example: []
  syntax:
    content: public AndConstraint<HttpResponseMessageAssertions> HaveContentHeaderValue(HttpResponseHeader header, string expected, string because = "", params object[] becauseArgs)
    parameters:
    - id: header
      type: System.Net.HttpResponseHeader
      description: The name of the header to find.
    - id: expected
      type: System.String
      description: The header value to find in <code data-dev-comment-type="paramref" class="paramref">header</code>.
    - id: because
      type: System.String
      description: "\nA formatted phrase as is supported by <xref href=\"System.String.Format(System.String%2cSystem.Object%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref> explaining why the assertion\nis needed. If the phrase does not start with the word <em>because</em>, it is prepended automatically.\n"
    - id: becauseArgs
      type: System.Object[]
      description: "\nZero or more objects to format using the placeholders in <code data-dev-comment-type=\"paramref\" class=\"paramref\">because</code>.\n"
    return:
      type: AndConstraint{FluentAssertions.Http.HttpResponseMessageAssertions}
    content.vb: Public Function HaveContentHeaderValue(header As HttpResponseHeader, expected As String, because As String = "", ParamArray becauseArgs As Object()) As AndConstraint(Of HttpResponseMessageAssertions)
  overload: FluentAssertions.Http.HttpResponseMessageAssertions.HaveContentHeaderValue*
  nameWithType.vb: HttpResponseMessageAssertions.HaveContentHeaderValue(HttpResponseHeader, String, String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FluentAssertions.Http.HttpResponseMessageAssertions.HaveContentHeaderValue(System.Net.HttpResponseHeader, System.String, System.String, System.Object())
  name.vb: HaveContentHeaderValue(HttpResponseHeader, String, String, Object())
- uid: FluentAssertions.Http.HttpResponseMessageAssertions.HaveContentHeaderValues(System.Net.HttpResponseHeader,System.Collections.Generic.IEnumerable{System.String},System.String,System.Object[])
  commentId: M:FluentAssertions.Http.HttpResponseMessageAssertions.HaveContentHeaderValues(System.Net.HttpResponseHeader,System.Collections.Generic.IEnumerable{System.String},System.String,System.Object[])
  id: HaveContentHeaderValues(System.Net.HttpResponseHeader,System.Collections.Generic.IEnumerable{System.String},System.String,System.Object[])
  parent: FluentAssertions.Http.HttpResponseMessageAssertions
  langs:
  - csharp
  - vb
  name: HaveContentHeaderValues(HttpResponseHeader, IEnumerable<String>, String, Object[])
  nameWithType: HttpResponseMessageAssertions.HaveContentHeaderValues(HttpResponseHeader, IEnumerable<String>, String, Object[])
  fullName: FluentAssertions.Http.HttpResponseMessageAssertions.HaveContentHeaderValues(System.Net.HttpResponseHeader, System.Collections.Generic.IEnumerable<System.String>, System.String, System.Object[])
  type: Method
  source:
    remote:
      path: FluentAssertions.Http/HttpResponseMessageAssertions.cs
      branch: master
      repo: https://github.com/balanikas/FluentAssertions.Http.git
    id: HaveContentHeaderValues
    path: ../FluentAssertions.Http/HttpResponseMessageAssertions.cs
    startLine: 502
  assemblies:
  - FluentAssertions.Http
  namespace: FluentAssertions.Http
  summary: "\nAsserts that the <xref href=\"System.Net.Http.HttpResponseMessage\" data-throw-if-not-resolved=\"false\"></xref> response headers contain <code data-dev-comment-type=\"paramref\" class=\"paramref\">expected</code> in <code data-dev-comment-type=\"paramref\" class=\"paramref\">header</code> header.\n"
  example: []
  syntax:
    content: public AndConstraint<HttpResponseMessageAssertions> HaveContentHeaderValues(HttpResponseHeader header, IEnumerable<string> expected, string because = "", params object[] becauseArgs)
    parameters:
    - id: header
      type: System.Net.HttpResponseHeader
      description: The name of the header to find.
    - id: expected
      type: System.Collections.Generic.IEnumerable{System.String}
      description: The header values to find in <code data-dev-comment-type="paramref" class="paramref">header</code>.
    - id: because
      type: System.String
      description: "\nA formatted phrase as is supported by <xref href=\"System.String.Format(System.String%2cSystem.Object%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref> explaining why the assertion\nis needed. If the phrase does not start with the word <em>because</em>, it is prepended automatically.\n"
    - id: becauseArgs
      type: System.Object[]
      description: "\nZero or more objects to format using the placeholders in <code data-dev-comment-type=\"paramref\" class=\"paramref\">because</code>.\n"
    return:
      type: AndConstraint{FluentAssertions.Http.HttpResponseMessageAssertions}
    content.vb: Public Function HaveContentHeaderValues(header As HttpResponseHeader, expected As IEnumerable(Of String), because As String = "", ParamArray becauseArgs As Object()) As AndConstraint(Of HttpResponseMessageAssertions)
  overload: FluentAssertions.Http.HttpResponseMessageAssertions.HaveContentHeaderValues*
  nameWithType.vb: HttpResponseMessageAssertions.HaveContentHeaderValues(HttpResponseHeader, IEnumerable(Of String), String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FluentAssertions.Http.HttpResponseMessageAssertions.HaveContentHeaderValues(System.Net.HttpResponseHeader, System.Collections.Generic.IEnumerable(Of System.String), System.String, System.Object())
  name.vb: HaveContentHeaderValues(HttpResponseHeader, IEnumerable(Of String), String, Object())
- uid: FluentAssertions.Http.HttpResponseMessageAssertions.HaveContentHeaderValues(System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Object[])
  commentId: M:FluentAssertions.Http.HttpResponseMessageAssertions.HaveContentHeaderValues(System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Object[])
  id: HaveContentHeaderValues(System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Object[])
  parent: FluentAssertions.Http.HttpResponseMessageAssertions
  langs:
  - csharp
  - vb
  name: HaveContentHeaderValues(String, IEnumerable<String>, String, Object[])
  nameWithType: HttpResponseMessageAssertions.HaveContentHeaderValues(String, IEnumerable<String>, String, Object[])
  fullName: FluentAssertions.Http.HttpResponseMessageAssertions.HaveContentHeaderValues(System.String, System.Collections.Generic.IEnumerable<System.String>, System.String, System.Object[])
  type: Method
  source:
    remote:
      path: FluentAssertions.Http/HttpResponseMessageAssertions.cs
      branch: master
      repo: https://github.com/balanikas/FluentAssertions.Http.git
    id: HaveContentHeaderValues
    path: ../FluentAssertions.Http/HttpResponseMessageAssertions.cs
    startLine: 523
  assemblies:
  - FluentAssertions.Http
  namespace: FluentAssertions.Http
  summary: "\nAsserts that the <xref href=\"System.Net.Http.HttpResponseMessage\" data-throw-if-not-resolved=\"false\"></xref> response headers contain <code data-dev-comment-type=\"paramref\" class=\"paramref\">expected</code> in <code data-dev-comment-type=\"paramref\" class=\"paramref\">headerName</code> header.\n"
  example: []
  syntax:
    content: public AndConstraint<HttpResponseMessageAssertions> HaveContentHeaderValues(string headerName, IEnumerable<string> expected, string because = "", params object[] becauseArgs)
    parameters:
    - id: headerName
      type: System.String
      description: The name of the header to find.
    - id: expected
      type: System.Collections.Generic.IEnumerable{System.String}
      description: The header values to find in <code data-dev-comment-type="paramref" class="paramref">headerName</code>.
    - id: because
      type: System.String
      description: "\nA formatted phrase as is supported by <xref href=\"System.String.Format(System.String%2cSystem.Object%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref> explaining why the assertion\nis needed. If the phrase does not start with the word <em>because</em>, it is prepended automatically.\n"
    - id: becauseArgs
      type: System.Object[]
      description: "\nZero or more objects to format using the placeholders in <code data-dev-comment-type=\"paramref\" class=\"paramref\">because</code>.\n"
    return:
      type: AndConstraint{FluentAssertions.Http.HttpResponseMessageAssertions}
    content.vb: Public Function HaveContentHeaderValues(headerName As String, expected As IEnumerable(Of String), because As String = "", ParamArray becauseArgs As Object()) As AndConstraint(Of HttpResponseMessageAssertions)
  overload: FluentAssertions.Http.HttpResponseMessageAssertions.HaveContentHeaderValues*
  nameWithType.vb: HttpResponseMessageAssertions.HaveContentHeaderValues(String, IEnumerable(Of String), String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FluentAssertions.Http.HttpResponseMessageAssertions.HaveContentHeaderValues(System.String, System.Collections.Generic.IEnumerable(Of System.String), System.String, System.Object())
  name.vb: HaveContentHeaderValues(String, IEnumerable(Of String), String, Object())
references:
- uid: FluentAssertions.Http
  commentId: N:FluentAssertions.Http
  name: FluentAssertions.Http
  nameWithType: FluentAssertions.Http
  fullName: FluentAssertions.Http
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: FluentAssertions.Http.HttpResponseMessageAssertions.#ctor*
  commentId: Overload:FluentAssertions.Http.HttpResponseMessageAssertions.#ctor
  name: HttpResponseMessageAssertions
  nameWithType: HttpResponseMessageAssertions.HttpResponseMessageAssertions
  fullName: FluentAssertions.Http.HttpResponseMessageAssertions.HttpResponseMessageAssertions
- uid: System.Net.Http.HttpResponseMessage
  commentId: T:System.Net.Http.HttpResponseMessage
  parent: System.Net.Http
  isExternal: true
  name: HttpResponseMessage
  nameWithType: HttpResponseMessage
  fullName: System.Net.Http.HttpResponseMessage
- uid: System.Net.Http
  commentId: N:System.Net.Http
  isExternal: true
  name: System.Net.Http
  nameWithType: System.Net.Http
  fullName: System.Net.Http
- uid: FluentAssertions.Http.HttpResponseMessageAssertions.Identifier*
  commentId: Overload:FluentAssertions.Http.HttpResponseMessageAssertions.Identifier
  name: Identifier
  nameWithType: HttpResponseMessageAssertions.Identifier
  fullName: FluentAssertions.Http.HttpResponseMessageAssertions.Identifier
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.HttpStatusCode
  commentId: T:System.Net.HttpStatusCode
  parent: System.Net
  isExternal: true
  name: HttpStatusCode
  nameWithType: HttpStatusCode
  fullName: System.Net.HttpStatusCode
- uid: System.String.Format(System.String,System.Object[])
  commentId: M:System.String.Format(System.String,System.Object[])
  isExternal: true
- uid: FluentAssertions.Http.HttpResponseMessageAssertions.HaveStatusCode*
  commentId: Overload:FluentAssertions.Http.HttpResponseMessageAssertions.HaveStatusCode
  name: HaveStatusCode
  nameWithType: HttpResponseMessageAssertions.HaveStatusCode
  fullName: FluentAssertions.Http.HttpResponseMessageAssertions.HaveStatusCode
- uid: System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: AndConstraint{FluentAssertions.Http.HttpResponseMessageAssertions}
  commentId: '!:AndConstraint{FluentAssertions.Http.HttpResponseMessageAssertions}'
  definition: AndConstraint`1
  name: AndConstraint<HttpResponseMessageAssertions>
  nameWithType: AndConstraint<HttpResponseMessageAssertions>
  fullName: AndConstraint<FluentAssertions.Http.HttpResponseMessageAssertions>
  nameWithType.vb: AndConstraint(Of HttpResponseMessageAssertions)
  fullName.vb: AndConstraint(Of FluentAssertions.Http.HttpResponseMessageAssertions)
  name.vb: AndConstraint(Of HttpResponseMessageAssertions)
  spec.csharp:
  - uid: AndConstraint`1
    name: AndConstraint
    nameWithType: AndConstraint
    fullName: AndConstraint
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: FluentAssertions.Http.HttpResponseMessageAssertions
    name: HttpResponseMessageAssertions
    nameWithType: HttpResponseMessageAssertions
    fullName: FluentAssertions.Http.HttpResponseMessageAssertions
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: AndConstraint`1
    name: AndConstraint
    nameWithType: AndConstraint
    fullName: AndConstraint
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: FluentAssertions.Http.HttpResponseMessageAssertions
    name: HttpResponseMessageAssertions
    nameWithType: HttpResponseMessageAssertions
    fullName: FluentAssertions.Http.HttpResponseMessageAssertions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Net
  commentId: N:System.Net
  isExternal: true
  name: System.Net
  nameWithType: System.Net
  fullName: System.Net
- uid: AndConstraint`1
  isExternal: true
  name: AndConstraint<>
  nameWithType: AndConstraint<>
  fullName: AndConstraint<>
  nameWithType.vb: AndConstraint(Of )
  fullName.vb: AndConstraint(Of )
  name.vb: AndConstraint(Of )
  spec.csharp:
  - uid: AndConstraint`1
    name: AndConstraint
    nameWithType: AndConstraint
    fullName: AndConstraint
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: AndConstraint`1
    name: AndConstraint
    nameWithType: AndConstraint
    fullName: AndConstraint
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: FluentAssertions.Http.HttpResponseMessageAssertions.HaveInformationalStatusCode*
  commentId: Overload:FluentAssertions.Http.HttpResponseMessageAssertions.HaveInformationalStatusCode
  name: HaveInformationalStatusCode
  nameWithType: HttpResponseMessageAssertions.HaveInformationalStatusCode
  fullName: FluentAssertions.Http.HttpResponseMessageAssertions.HaveInformationalStatusCode
- uid: FluentAssertions.Http.HttpResponseMessageAssertions.HaveSuccessStatusCode*
  commentId: Overload:FluentAssertions.Http.HttpResponseMessageAssertions.HaveSuccessStatusCode
  name: HaveSuccessStatusCode
  nameWithType: HttpResponseMessageAssertions.HaveSuccessStatusCode
  fullName: FluentAssertions.Http.HttpResponseMessageAssertions.HaveSuccessStatusCode
- uid: FluentAssertions.Http.HttpResponseMessageAssertions.HaveRedirectionStatusCode*
  commentId: Overload:FluentAssertions.Http.HttpResponseMessageAssertions.HaveRedirectionStatusCode
  name: HaveRedirectionStatusCode
  nameWithType: HttpResponseMessageAssertions.HaveRedirectionStatusCode
  fullName: FluentAssertions.Http.HttpResponseMessageAssertions.HaveRedirectionStatusCode
- uid: FluentAssertions.Http.HttpResponseMessageAssertions.HaveClientErrorStatusCode*
  commentId: Overload:FluentAssertions.Http.HttpResponseMessageAssertions.HaveClientErrorStatusCode
  name: HaveClientErrorStatusCode
  nameWithType: HttpResponseMessageAssertions.HaveClientErrorStatusCode
  fullName: FluentAssertions.Http.HttpResponseMessageAssertions.HaveClientErrorStatusCode
- uid: FluentAssertions.Http.HttpResponseMessageAssertions.HaveServerErrorStatusCode*
  commentId: Overload:FluentAssertions.Http.HttpResponseMessageAssertions.HaveServerErrorStatusCode
  name: HaveServerErrorStatusCode
  nameWithType: HttpResponseMessageAssertions.HaveServerErrorStatusCode
  fullName: FluentAssertions.Http.HttpResponseMessageAssertions.HaveServerErrorStatusCode
- uid: System.Net.Http.HttpContent
  commentId: T:System.Net.Http.HttpContent
  isExternal: true
- uid: FluentAssertions.Http.HttpResponseMessageAssertions.HaveContent*
  commentId: Overload:FluentAssertions.Http.HttpResponseMessageAssertions.HaveContent
  name: HaveContent
  nameWithType: HttpResponseMessageAssertions.HaveContent
  fullName: FluentAssertions.Http.HttpResponseMessageAssertions.HaveContent
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Func{EquivalencyAssertionOptions{{T}},EquivalencyAssertionOptions{{T}}}
  commentId: T:System.Func{EquivalencyAssertionOptions{``0},EquivalencyAssertionOptions{``0}}
  parent: System
  definition: System.Func`2
  name: Func<EquivalencyAssertionOptions<T>, EquivalencyAssertionOptions<T>>
  nameWithType: Func<EquivalencyAssertionOptions<T>, EquivalencyAssertionOptions<T>>
  fullName: System.Func<EquivalencyAssertionOptions<T>, EquivalencyAssertionOptions<T>>
  nameWithType.vb: Func(Of EquivalencyAssertionOptions(Of T), EquivalencyAssertionOptions(Of T))
  fullName.vb: System.Func(Of EquivalencyAssertionOptions(Of T), EquivalencyAssertionOptions(Of T))
  name.vb: Func(Of EquivalencyAssertionOptions(Of T), EquivalencyAssertionOptions(Of T))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EquivalencyAssertionOptions`1
    name: EquivalencyAssertionOptions
    nameWithType: EquivalencyAssertionOptions
    fullName: EquivalencyAssertionOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EquivalencyAssertionOptions`1
    name: EquivalencyAssertionOptions
    nameWithType: EquivalencyAssertionOptions
    fullName: EquivalencyAssertionOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EquivalencyAssertionOptions`1
    name: EquivalencyAssertionOptions
    nameWithType: EquivalencyAssertionOptions
    fullName: EquivalencyAssertionOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EquivalencyAssertionOptions`1
    name: EquivalencyAssertionOptions
    nameWithType: EquivalencyAssertionOptions
    fullName: EquivalencyAssertionOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: FluentAssertions.Http.HttpResponseMessageAssertions.HaveContentMatching*
  commentId: Overload:FluentAssertions.Http.HttpResponseMessageAssertions.HaveContentMatching
  name: HaveContentMatching
  nameWithType: HttpResponseMessageAssertions.HaveContentMatching
  fullName: FluentAssertions.Http.HttpResponseMessageAssertions.HaveContentMatching
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, Boolean>>
  nameWithType: Expression<Func<T, Boolean>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>
  nameWithType.vb: Expression(Of Func(Of T, Boolean))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean))
  name.vb: Expression(Of Func(Of T, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: System.Linq.Expressions.Expression{System.Func{System.String,System.Boolean}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{System.String,System.Boolean}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<String, Boolean>>
  nameWithType: Expression<Func<String, Boolean>>
  fullName: System.Linq.Expressions.Expression<System.Func<System.String, System.Boolean>>
  nameWithType.vb: Expression(Of Func(Of String, Boolean))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of System.String, System.Boolean))
  name.vb: Expression(Of Func(Of String, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: FluentAssertions.Http.HttpResponseMessageAssertions.HaveResponseHeader*
  commentId: Overload:FluentAssertions.Http.HttpResponseMessageAssertions.HaveResponseHeader
  name: HaveResponseHeader
  nameWithType: HttpResponseMessageAssertions.HaveResponseHeader
  fullName: FluentAssertions.Http.HttpResponseMessageAssertions.HaveResponseHeader
- uid: FluentAssertions.Http.HttpResponseMessageAssertions.HaveResponseHeaderValue*
  commentId: Overload:FluentAssertions.Http.HttpResponseMessageAssertions.HaveResponseHeaderValue
  name: HaveResponseHeaderValue
  nameWithType: HttpResponseMessageAssertions.HaveResponseHeaderValue
  fullName: FluentAssertions.Http.HttpResponseMessageAssertions.HaveResponseHeaderValue
- uid: System.Net.HttpResponseHeader
  commentId: T:System.Net.HttpResponseHeader
  parent: System.Net
  isExternal: true
  name: HttpResponseHeader
  nameWithType: HttpResponseHeader
  fullName: System.Net.HttpResponseHeader
- uid: FluentAssertions.Http.HttpResponseMessageAssertions.HaveResponseHeaderValues*
  commentId: Overload:FluentAssertions.Http.HttpResponseMessageAssertions.HaveResponseHeaderValues
  name: HaveResponseHeaderValues
  nameWithType: HttpResponseMessageAssertions.HaveResponseHeaderValues
  fullName: FluentAssertions.Http.HttpResponseMessageAssertions.HaveResponseHeaderValues
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: FluentAssertions.Http.HttpResponseMessageAssertions.HaveContentHeader*
  commentId: Overload:FluentAssertions.Http.HttpResponseMessageAssertions.HaveContentHeader
  name: HaveContentHeader
  nameWithType: HttpResponseMessageAssertions.HaveContentHeader
  fullName: FluentAssertions.Http.HttpResponseMessageAssertions.HaveContentHeader
- uid: FluentAssertions.Http.HttpResponseMessageAssertions.HaveContentHeaderValue*
  commentId: Overload:FluentAssertions.Http.HttpResponseMessageAssertions.HaveContentHeaderValue
  name: HaveContentHeaderValue
  nameWithType: HttpResponseMessageAssertions.HaveContentHeaderValue
  fullName: FluentAssertions.Http.HttpResponseMessageAssertions.HaveContentHeaderValue
- uid: FluentAssertions.Http.HttpResponseMessageAssertions.HaveContentHeaderValues*
  commentId: Overload:FluentAssertions.Http.HttpResponseMessageAssertions.HaveContentHeaderValues
  name: HaveContentHeaderValues
  nameWithType: HttpResponseMessageAssertions.HaveContentHeaderValues
  fullName: FluentAssertions.Http.HttpResponseMessageAssertions.HaveContentHeaderValues
